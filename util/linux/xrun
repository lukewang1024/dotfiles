#!/usr/bin/env bash

print_usage() {
  cat << 'EOB' >&2
xrun - Run, raise, or hide windows in X

[Options]

-i INSTANCE
Search for windows with the given INSTANCE

-c CLASS
Search for windows with the given CLASS

-e COMMAND
Command to run if no window is found. Complex commands can be written inside quotes:
  i3run -i sublime_text -e 'subl && notify-send "sublime is started"'

-x OLD_NAME
If the search criteria is -i (instance), the window with instance: OLDNAME will get a new
instance name matching the criteria when it is created (needs xdotool).
  xrun -i subl_test -x Subl -e subl

  # when the command above is executed:
  # a window with the instance name: "subl_test" will be searched for.
  # if no window is found the command: "subl" will get executed,
  # and when a window with the instance name: "Subl" is found,
  # the instance name of that window will get renamed to: "subl_test"

-h
Show help and exit.
EOB
  exit 0
}

string_contain() { [ -z "$1" ] || { [ -z "${2##*$1*}" ] && [ -n "$2" ]; }; }

parse_args() {
  OPTIND=1 # Reset in case getopts has been used previously in the shell.

  # Initialize our own variables:
  xdotool_filter=''
  exec_cmd=''
  summon=0

  while getopts 'c:e:hi:s' opt; do
    case "$opt" in
      h)
        print_usage
        ;;
      i)
        xdotool_filter="--classname $OPTARG"
        ;;
      c)
        xdotool_filter="--class $OPTARG"
        ;;
      e)
        exec_cmd="$OPTARG"
        ;;
      s)
        summon=1
        ;;
    esac
  done

  shift $((OPTIND-1))

  [ "${1:-}" = "--" ] && shift
}

get_active_windowid() {
  local name windowid
  read name windowid < <(xprop -root ' $0\n' _NET_ACTIVE_WINDOW)
  printf '%s\n' "$windowid"
}

main() {
  if [ $# = 0 ]; then
    print_usage
  fi

  parse_args "$@"

  local wid_list="$(xdotool search $xdotool_filter)"
  if [ -n "$wid_list" ]; then
    while read -r wid; do
      # Only normal window can be activated, so find it by checking if
      # _NET_WM_DESKTOP value exists
      local probe="$(xprop -id "$wid" _NET_WM_DESKTOP)"
      if string_contain '=' "$probe"; then
        if [[ $wid -eq $(get_active_windowid) ]]; then
          xdotool windowminimize "$wid"
        else
          xdotool windowactivate "$wid"
        fi
        break
      fi
    done < <(echo "$wid_list")
  else
    exec $exec_cmd
  fi
}

main "$@"

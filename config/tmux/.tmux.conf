set -g prefix2 `      # backtick is pretty handy in many cases
bind ` send-prefix -2 # `` sends a ` in case you need one

set -g mode-keys vi
set -g update-environment "DISPLAY SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY"
set -g mouse on
set -g renumber-windows on
set -g base-index 1
setw -g pane-base-index 1
set -g display-panes-time 4000
setw -g monitor-activity on
set -g visual-activity on
set -g visual-bell on
set -g status-position top
set -sg escape-time 0

# zoom/unzoom the current pane
bind z resize-pane -Z

# If the window has more than 1 panes, kill without confirming.
# Confirm before kill the last pane (along with its window) in a window.
bind x if "tmux display -p \"#{window_panes}\" | grep ^1\$" \
  "confirm-before -p \"Kill the only pane in window? It will kill this window too! (y/n)\" kill-pane" \
  "kill-pane"

# Window <-join/split-> Pane
# Convert a window from current or any other session to a pane
bind u command-prompt -p "Join pane from [sess:]win# (ex: kmodi:3 or 2(from current session)):" "join-pane -s '%%'"
# Convert a pane to a window in current or any other session
bind U command-prompt -p "Send pane to sess or sess:win# or win# (ex: kmodi or kmodi:3 or 2(of current session)):" "join-pane -t '%%'"

# Cycle Panes
bind o select-pane -t :.+   # cycle panes
bind O select-pane -t :.-   # cycle panes in reverse

# Smart pane switching with awareness of vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
# Use Alt-vim keys without prefix key to switch panes
bind -n M-h if "$is_vim" "send-keys C-h" "select-pane -L"
bind -n M-j if "$is_vim" "send-keys C-j" "select-pane -D"
bind -n M-k if "$is_vim" "send-keys C-k" "select-pane -U"
bind -n M-l if "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if "$is_vim" "send-keys C-\\" "select-pane -l"
# Use Alt-arrow keys without prefix key to switch panes
bind -n M-Left if "$is_vim" "send-keys C-h" "select-pane -L"
bind -n M-Right if "$is_vim" "send-keys C-l" "select-pane -R"
bind -n M-Up if "$is_vim" "send-keys C-k" "select-pane -U"
bind -n M-Down if "$is_vim" "send-keys C-j" "select-pane -D"

# Window Management

bind W command-prompt -p "New window:" "new-window -c '#{pane_current_path}' -n %1"
bind n command-prompt -p "New name for this window:" "rename-window '%%'"
unbind L # unbind default binding for `switch-client -l`
bind L list-windows -F '#{window_index}:#{window_name}: #{?pane_dead, (dead), (not dead)}'ï»¿
unbind & # unbind default binding for `kill-window`
bind C-c confirm-before -p "Kill this window? (y/n)" kill-window
# Move the current window to another window index in the same or any other session
bind m command-prompt -p "Move window to sess or sess:win# or win# (ex: kmodi or kmodi:3 or 2(of current session)):" "move-window -t '%%'"
# Move or bring a window from a different session to the current one
bind M command-prompt -p "Move the window from sess:win# (ex: kmodi:3):" "move-window -s '%%'"

# comma, period to move between windows
bind -r , previous-window   # move window one position to the left
bind -r . next-window       # move window one position to the right

# Shift arrow to switch windows (no prefix needed)
bind -n S-Left  previous-window
bind -n S-Right next-window

# switch to another window by name
bind w split-window "tmux lsw | percol --initial-index `tmux lsw | awk '/active.$/ {print NR-1}'` | cut -d':' -f 1 | xargs tmux select-window -t"

# Swap Windows
bind N move-window -r         # renumber the windows
unbind t                      # unbind default binding to show time
bind t swap-window -t 1       # swap the current window's position with window # 1, move it to the top

# Layout
bind Space next-layout
bind C-Space select-layout -o # undo only the last layout change

# Middle click on status
# Middle click on a window name in status bar to kill it
bind -T root MouseDown2Status kill-window
# Middle click in a pane to paste
bind -T root MouseDown2Pane run -b "exec </dev/null; xclip -o | awk 1 ORS=' ' | tmux load-buffer - ; tmux paste-buffer"

# copy-mode -e
bind-key -T root PPage if-shell -F "#{alternate_on}" "send-keys PPage" "copy-mode -e; send-keys PPage"
bind-key -T copy-mode-vi PPage send-keys -X page-up
bind-key -T copy-mode-vi NPage send-keys -X page-down

bind-key -T root WheelUpPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
bind-key -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"
bind-key -T copy-mode-vi WheelUpPane send-keys -X halfpage-up
bind-key -T copy-mode-vi WheelDownPane send-keys -X halfpage-down

# toggle pane styles between dark and light
bind C-t run 'tmux setw -g window-style bg=colour$(expr 489 - $(tmux showw -g window-style | tr -d -c 0-9)); \
  tmux setw -g window-active-style bg=colour$(expr 489 - $(tmux showw -g window-active-style | tr -d -c 0-9))'

# split window
# https://www.reddit.com/r/tmux/comments/3paqoi/tmux_21_has_been_released/cw5wy00
bind f switch-client -Tsplit_wind
bind -Tsplit_wind v split-window -v -c '#{pane_current_path}'
bind -Tsplit_wind V split-window -v -c '#{pane_current_path}'\; swap-pane -U
bind -Tsplit_wind h split-window -h -c '#{pane_current_path}'
bind -Tsplit_wind H split-window -h -c '#{pane_current_path}'\; swap-pane -U

# Window Title
set -g set-titles on
# Use hostname (@#h) in set-titles-string with SSH.
if 'test -n "$SSH_CLIENT"' \
  'set -g set-titles-string "[tmux] [#S:#I.#P @#h] #W"' \
  'set -g set-titles-string "[tmux] [#S:#I.#P] #W"'

# Load status bar theme (deprecated in favor of tpm managed theme)
# run '~/.dotfiles/config/tmux/theme.sh'

# Toggle the status line shown between top & bottom
bind T set status-position

# Command Prompt
# Move focus to command prompt. tmux commands can be entered there directly
# without using the `tmux` prefix and it also supports auto-complete.
bind C-x command-prompt # default command-prompt binding "PREFIX :" also works

# Use Vi-style keys for copying and pasting
bind v copy-mode
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-selection
bind p paste-buffer

# Synchronize commands to panes/windows/sessions

# Send the same command to all panes in the same window
bind C-a command-prompt -p 'Command to all panes in this window:' \
  "run \"tmux list-panes -F '##{pane_index}' | xargs -I PANE \
    tmux send-keys -t PANE '%1' Enter\""

# Alternative to using the above "C-a" binding is to enable pane synchronization,
# type the command you want to execute in all panes in the same window and disable
# pane synchronization. So it would be: C-q <type the command RET> C-q
bind Q if -F '#{pane_synchronized}' \
  'setw synchronize-panes off; display "Pane synchronization turned off."' \
  'setw synchronize-panes on; display "Pane synchronization turned on."'

# Send the same command to all panes/windows in the specified session
# Inspired from http://stackoverflow.com/questions/9250884/send-command-to-all-window-in-tmux
bind C-e command-prompt -p 'Session:,Command:' \
  "run \"tmux list-windows -t %1 -F '%1:##{window_index}' | xargs -I SESS_WIN \
    tmux list-panes -t SESS_WIN -F 'SESS_WIN.##{pane_index}' | xargs -I SESS_WIN_PANE \
    tmux send-keys -t SESS_WIN_PANE '%2' Enter\""

# Send the same command to all panes/windows/sessions
bind E command-prompt -p "Command to all panes/windows/sessions:" \
  "run \"tmux list-sessions -F '##{session_name}' | xargs -I SESS \
    tmux list-windows -t SESS -F 'SESS:##{window_index}' | xargs -I SESS_WIN \
    tmux list-panes -t SESS_WIN -F 'SESS_WIN.##{pane_index}' | xargs -I SESS_WIN_PANE \
    tmux send-keys -t SESS_WIN_PANE '%1' Enter\""

# loads a man page in a new pane below current
bind C-M command-prompt "split-window 'exec man %%'"

# runs ssh in a new window, you might want connect instead
bind C-N command-prompt "new-window -n %1 'ssh %1'"

# List of plugins
set -g @tpm_plugins '                 \
  caiogondim/maglev                   \
  tmux-plugins/tpm                    \
  tmux-plugins/tmux-sensible          \
  tmux-plugins/tmux-resurrect         \
  tmux-plugins/tmux-continuum         \
  tmux-plugins/tmux-copycat           \
  tmux-plugins/tmux-yank              \
  tmux-plugins/tmux-pain-control      \
  tmux-plugins/tmux-open              \
  tmux-plugins/tmux-battery           \
  tmux-plugins/tmux-cpu               \
  tmux-plugins/tmux-prefix-highlight  \
  tmux-plugins/tmux-sessionist        \
  tmux-plugins/tmux-logging           \
  tmux-plugins/tmux-sidebar           \
  tmux-plugins/tmux-fpp               \
  tmux-plugins/tmux-urlview           \
'

# Plugin configs
set -g @continuum-restore 'on'
set -g @continuum-boot 'on'
set -g @continuum-boot-options 'iterm'

# Automatic tpm installation
if "test ! -d ~/.tmux/plugins/tpm" \
  "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm'"

# Initialize tmux plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'

# Local configs
if 'test -f ~/.tmux.conf.local' 'source ~/.tmux.conf.local'

[alias]
  aa = add -A
  amend = commit --amend
  assume = update-index --assume-unchanged
  assumeall = !git st -s | awk {print
  assumed = !git ls-files -v | grep ^h | cut -c 3-
  bcl = "!f() { \
    ref=${1-$(git branch --show-current)}; \
    [ "$(uname -s)" = 'Darwin' ] && cmd='gxargs' || cmd='xargs'; \
    git branch --merged ${ref} | grep -vE \" ${ref}$\" | $cmd -r git branch -d; \
  }; f"
  br = branch
  ca = commit -am
  ci = commit -v
  cl = clone
  co = checkout
  cos = "!f() { \
    ref=${1-$(git branch --show-current)}; \
    git checkout $ref && git merge origin/$(git branch --show-current); \
  }; f"
  cp = cherry-pick
  dc = diff --cached
  dcname = diff --cached --name-status -r
  dcstat = diff --cached --stat -r
  del = log --diff-filter=D --
  df = diff --word-diff
  dfl = !sh -c \"git diff HEAD~$1 HEAD\" -
  dfname = diff --name-status -r
  dfstat = diff --stat -r
  dl = !git ll -1
  dlc = diff --cached HEAD^
  dr = "!f() { git diff \"$1\"^..\"$1\"; }; f"
  f = !git ls-files | grep -i
  fa = fetch --all
  fb = fetch backup
  ff = flow feature
  ffc = flow feature checkout
  fff = flow feature finish
  ffp = flow feature publish
  ffs = flow feature start
  fhf = flow hotfix finish
  fhs = flow hotfix start
  fl = log -u
  fo = fetch origin
  fr = flow release
  frf = flow release finish
  frp = flow release publish
  frs = flow release start
  ft = fetch
  fu = fetch upstream
  gr = grep -Ii
  gra = "!f() { \
    A=$(pwd) && \
    TOPLEVEL=$(git rev-parse --show-toplevel) && \
    cd $TOPLEVEL && \
    git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && \
    cd $A; \
  }; f"
  identity = "!git-set-identity"
  la = !git config -l | grep alias | cut -c 7- | less
  last = !sh -c \"git log -${1:-1} HEAD\" -
  lc = "!f() { git ll \"$1\"^..\"$1\"; }; f"
  lcnt = !sh -c \"git ls-files | xargs wc -l\" -
  ll = log --pretty=format:\"%C(red)%h %C(auto)-%d %s %C(green)(%ad) %C(bold blue)<%an>%C(reset)\"
  lls = ll --date=short
  llr = ll --date=relative
  lg = ll --graph
  lgs = lls --graph
  lgr = llr --graph
  ls = ll --stat
  lss = lls --stat
  lsr = llr --stat
  lt = describe --tags --abbrev=0
  merge-commit-find = "!f() { \
    commit=$1; branch=${2:-HEAD}; \
    (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n |  tail -1 | cut -f2; \
  }; f"
  merge-commit-show = "!f() { \
    merge=$(git merge-commit-find $1 $2); \
    [ -n \"$merge\" ] && git show $merge; \
  }; f"
  mg = merge
  new = !sh -c \"git log $1@{1}..$1@{0} \"$@\"\"
  ours = "!f() { git checkout --ours $@ && git add $@; }; f"
  pb = push backup --follow-tags
  po = push origin --follow-tags
  ps = push --follow-tags
  pu = push upstream --follow-tags
  rabb = "!f() { git remote add $1 https://bitbucket.org/$2.git; }; f"
  ragh = "!f() { git remote add $1 https://github.com/$2.git; }; f"
  rb = rebase
  regret = reset --soft HEAD~1
  rst = reset
  rst1 = reset HEAD^
  rst2 = reset HEAD^^
  rsth = reset --hard
  rsth1 = reset HEAD^ --hard
  rsth2 = reset HEAD^^ --hard
  sa = !sh -c \"git stash apply stash@{${1:-0}}\" -
  sd = !sh -c \"git stash drop stash@{${1:-0}}\" -
  sh = !sh -c \"git stash show -p stash@{${1:-0}}\" -
  sl = stash list
  sm = !sh -c \"git log --all --grep=$1\" -
  so = "!f() { [ $# = 0 ] && git pull origin || git fetch origin $1:$1; }; f"
  sortdiff = !sh -c \"git diff \"$@\" | grep \"^[+-]\" | sort --key=1.2 | uniq -u -s1\"
  sp = stash pop
  ss = stash save
  st = status -sb
  svnd = svn dcommit
  svnl = svn log --oneline --show-commit
  svnr = svn rebase
  td = tag -l --sort=-creatordate --format='%(creatordate:short):  %(refname:short)'
  theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"
  tree = forest --pretty=format:\"%C(red)%h %C(magenta)(%ar) %C(blue)%an %C(reset)%s\" --style=15 --reverse
  trf = !sh -c \"git reflog --pretty=raw | tig --pretty=raw | cat\"
  unassume = update-index --no-assume-unchanged
  unassumeall = !git assumed | xargs git update-index --no-assume-unchanged
  unstage = reset HEAD --
  untrack = rm --cache --
  up = pull --rebase --autostash
  version-branch-diff = "!f() { \
    [ $# -le 2 ] && echo 'Usage: git version-branch-diff [branch_1] [branch_2] ([base_branch])' && exit; \
    branch_1=$1; branch_2=$2; base_branch=${3:-HEAD}; \
    git lls --merges --ancestry-path $(git merge-base $base_branch $branch_1)~1..$(git merge-base $base_branch $branch_2); \
  }; f"
  who = shortlog -s --

# syntax:ssHash

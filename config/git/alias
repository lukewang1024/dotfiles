[alias]
  aa = add -A
  amend = commit --amend
  assume = update-index --assume-unchanged
  assumeall = !git st -s | awk {print
  assumed = !git ls-files -v | grep ^h | cut -c 3-
  bcl = "!f() { \
    ref=${1-$(git branch --show-current)}; \
    [ "$(uname -s)" = 'Darwin' ] && cmd='gxargs' || cmd='xargs'; \
    git branch --merged ${ref} | grep -vE \" ${ref}$\" | $cmd -r git branch -d; \
  }; f"
  br = branch
  ca = commit -am
  ci = commit -v
  cl = clone
  co = checkout
  cos = "!f() { \
    ref=${1-$(git branch --show-current)}; \
    git checkout $ref && git merge origin/$(git branch --show-current); \
  }; f"
  cp = cherry-pick
  dc = diff --cached
  dcname = diff --cached --name-status -r
  dcstat = diff --cached --stat -r
  del = log --diff-filter=D --
  df = diff --word-diff
  dfl = !sh -c \"git diff HEAD~$1 HEAD\" -
  dfname = diff --name-status -r
  dfstat = diff --stat -r
  dl = !git ll -1
  dlc = diff --cached HEAD^
  dr = "!f() { git diff \"$1\"^..\"$1\"; }; f"
  f = !git ls-files | grep -i
  fa = fetch --all
  fb = fetch backup
  ff = flow feature
  ffc = flow feature checkout
  fff = flow feature finish
  ffp = flow feature publish
  ffs = flow feature start
  fhf = flow hotfix finish
  fhs = flow hotfix start
  fl = log -u
  fo = fetch origin
  fr = flow release
  frf = flow release finish
  frp = flow release publish
  frs = flow release start
  ft = fetch
  fu = fetch upstream
  gr = grep -Ii
  gra = "!f() { \
    A=$(pwd) && \
    TOPLEVEL=$(git rev-parse --show-toplevel) && \
    cd $TOPLEVEL && \
    git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && \
    cd $A; \
  }; f"
  la = !git config -l | grep alias | cut -c 7- | less
  last = !sh -c \"git log -${1:-1} HEAD\" -
  lc = "!f() { git ll \"$1\"^..\"$1\"; }; f"
  lcnt = !sh -c \"git ls-files | xargs wc -l\" -
  ld = log --pretty=format:\"%C(yellow)%h\\\\ %ad%Cred%d\\\\ %Creset%s%Cblue\\\\ [%cn]\" --decorate --date=relative
  lds = log --pretty=format:\"%C(yellow)%h\\\\ %ad%Cred%d\\\\ %Creset%s%Cblue\\\\ [%cn]\" --decorate --date=short
  le = log --oneline --decorate
  lff = log ORIG_HEAD.. --stat --no-merges
  lg = log --date=local
  lgt = !git lgt1
  lgt1 = log --graph --abbrev-commit --decorate --date=relative --format=format:\"%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)\" --all
  lgt2 = log --graph --abbrev-commit --decorate --format=format:\"%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n\"\"          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)\" --all
  ll = log --pretty=format:\"%C(yellow)%h%Cred%d\\\\ %Creset%s%Cblue\\\\ [%cn]\" --decorate --numstat
  lnc = log --pretty=format:\"%h\\\\ %s\\\\ [%cn]\"
  ls = log --pretty=format:\"%C(yellow)%h%Cred%d\\\\ %Creset%s%Cblue\\\\ [%cn]\" --decorate
  lt = describe --tags --abbrev=0
  mg = merge
  new = !sh -c \"git log $1@{1}..$1@{0} \"$@\"\"
  ours = "!f() { git co --ours $@ && git add $@; }; f"
  pb = push backup --follow-tags
  po = push origin --follow-tags
  ps = push --follow-tags
  pu = push upstream --follow-tags
  rabb = "!f() { git remote add $1 https://bitbucket.org/$2.git; }; f"
  ragh = "!f() { git remote add $1 https://github.com/$2.git; }; f"
  rb = rebase
  regret = reset --soft HEAD~1
  rst = reset
  rst1 = reset HEAD^
  rst2 = reset HEAD^^
  rsth = reset --hard
  rsth1 = reset HEAD^ --hard
  rsth2 = reset HEAD^^ --hard
  rv = "!f() { git push origin HEAD:refs/for/${1:-master}%${2}; }; f"
  rvcin = commit --amend --no-edit
  rvdbr = "!f() { git branch | grep ${1:-sandbox} | xargs git branch -D; }; f"
  rvfp = "!f() { git fetch origin refs/changes/$(printf "%02d" $(expr ${1} % 100))/${1}/${2:-1} && git checkout FETCH_HEAD;}; f"
  rvm = "!f() { git push origin HEAD:refs/for/master%${1}; }; f"
  rvnew = "!f() { git fetch && git checkout -b sandbox/`whoami`/`date +%m-%d`/${2:-`date +%H-%M`} origin/${1:-master}; }; f"
  sa = !sh -c \"git stash apply stash@{${1:-0}}\" -
  sba = "!f() { git subtree add --prefix $2 $1 master --squash; }; f"
  sd = !sh -c \"git stash drop stash@{${1:-0}}\" -
  sh = !sh -c \"git stash show -p stash@{${1:-0}}\" -
  sl = stash list
  sm = !sh -c \"git log --all --grep=$1\" -
  sortdiff = !sh -c \"git diff \"$@\" | grep \"^[+-]\" | sort --key=1.2 | uniq -u -s1\"
  sp = stash pop
  ss = stash save
  st = status -sb
  svnd = svn dcommit
  svnl = svn log --oneline --show-commit
  svnr = svn rebase
  theirs = "!f() { git co --theirs $@ && git add $@; }; f"
  tig-compare-commits = "!f() { \
    echo Checking branch existence; \
    if [[ $(git branch --list temp-compare-base) != \"\" ]]; then\
      echo Branch exists, comparing with $1; \
      git difftool -d temp-compare-base..$1; \
      git branch --delete temp-compare-base; \
    else \
      echo Creating initial branch at $1; \
      git branch temp-compare-base $1; \
    fi;\
  };"
  tree = forest --pretty=format:\"%C(red)%h %C(magenta)(%ar) %C(blue)%an %C(reset)%s\" --style=15 --reverse
  trf = !sh -c \"git reflog --pretty=raw | tig --pretty=raw | cat\"
  unassume = update-index --no-assume-unchanged
  unassumeall = !git assumed | xargs git update-index --no-assume-unchanged
  unstage = reset HEAD --
  untrack = rm --cache --
  up = pull --rebase --autostash
  who = shortlog -s --
